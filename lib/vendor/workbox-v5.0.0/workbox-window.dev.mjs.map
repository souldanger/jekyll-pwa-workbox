{"version":3,"file":"workbox-window.dev.mjs","sources":["../_version.js","../messageSW.js","../../workbox-core/_version.js","../../workbox-core/_private/Deferred.js","../../workbox-core/_private/dontWaitFor.js","../../workbox-core/_private/logger.js","../utils/WorkboxEventTarget.js","../utils/urlsMatch.js","../utils/WorkboxEvent.js","../Workbox.js"],"sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:window:5.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Sends a data object to a service worker via `postMessage` and resolves with\n * a response (if any).\n *\n * A response can be set in a message handler in the service worker by\n * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n * returned by `messageSW()`. If no response is set, the promise will not\n * resolve.\n *\n * @param {ServiceWorker} sw The service worker to send the message to.\n * @param {Object} data An object to send to the service worker.\n * @return {Promise<Object|undefined>}\n * @memberof module:workbox-window\n */\nfunction messageSW(sw, data) {\n    return new Promise((resolve) => {\n        let messageChannel = new MessageChannel();\n        messageChannel.port1.onmessage = (event) => {\n            resolve(event.data);\n        };\n        sw.postMessage(data, [messageChannel.port2]);\n    });\n}\n;\nexport { messageSW };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:5.0.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    promise.then(() => { });\n}\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production' ? null : (() => {\n    // Don't overwrite this value if it's already set.\n    // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n    if (!('__WB_DISABLE_DEV_LOGS' in self)) {\n        self.__WB_DISABLE_DEV_LOGS = false;\n    }\n    let inGroup = false;\n    const methodToColorMap = {\n        debug: `#7f8c8d`,\n        log: `#2ecc71`,\n        warn: `#f39c12`,\n        error: `#c0392b`,\n        groupCollapsed: `#3498db`,\n        groupEnd: null,\n    };\n    const print = function (method, args) {\n        if (self.__WB_DISABLE_DEV_LOGS) {\n            return;\n        }\n        if (method === 'groupCollapsed') {\n            // Safari doesn't print all console.groupCollapsed() arguments:\n            // https://bugs.webkit.org/show_bug.cgi?id=182754\n            if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                console[method](...args);\n                return;\n            }\n        }\n        const styles = [\n            `background: ${methodToColorMap[method]}`,\n            `border-radius: 0.5em`,\n            `color: white`,\n            `font-weight: bold`,\n            `padding: 2px 0.5em`,\n        ];\n        // When in a group, the workbox prefix is not displayed.\n        const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n        console[method](...logPrefix, ...args);\n        if (method === 'groupCollapsed') {\n            inGroup = true;\n        }\n        if (method === 'groupEnd') {\n            inGroup = false;\n        }\n    };\n    const api = {};\n    const loggerMethods = Object.keys(methodToColorMap);\n    for (const key of loggerMethods) {\n        const method = key;\n        api[method] = (...args) => {\n            print(method, args);\n        };\n    }\n    return api;\n})());\nexport { logger };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\nexport class WorkboxEventTarget {\n    constructor() {\n        this._eventListenerRegistry = new Map();\n    }\n    /**\n     * @param {string} type\n     * @param {Function} listener\n     * @private\n     */\n    addEventListener(type, listener) {\n        const foo = this._getEventListenersByType(type);\n        foo.add(listener);\n    }\n    /**\n     * @param {string} type\n     * @param {Function} listener\n     * @private\n     */\n    removeEventListener(type, listener) {\n        this._getEventListenersByType(type).delete(listener);\n    }\n    /**\n     * @param {Object} event\n     * @private\n     */\n    dispatchEvent(event) {\n        event.target = this;\n        const listeners = this._getEventListenersByType(event.type);\n        for (const listener of listeners) {\n            listener(event);\n        }\n    }\n    /**\n     * Returns a Set of listeners associated with the passed event type.\n     * If no handlers have been registered, an empty Set is returned.\n     *\n     * @param {string} type The event type.\n     * @return {Set<ListenerCallback>} An array of handler functions.\n     * @private\n     */\n    _getEventListenersByType(type) {\n        if (!this._eventListenerRegistry.has(type)) {\n            this._eventListenerRegistry.set(type, new Set());\n        }\n        return this._eventListenerRegistry.get(type);\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns true if two URLs have the same `.href` property. The URLS can be\n * relative, and if they are the current location href is used to resolve URLs.\n *\n * @private\n * @param {string} url1\n * @param {string} url2\n * @return {boolean}\n */\nexport function urlsMatch(url1, url2) {\n    const { href } = location;\n    return new URL(url1, href).href === new URL(url2, href).href;\n}\n;\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A minimal `Event` subclass shim.\n * This doesn't *actually* subclass `Event` because not all browsers support\n * constructable `EventTarget`, and using a real `Event` will error.\n * @private\n */\nexport class WorkboxEvent {\n    constructor(type, props) {\n        this.type = type;\n        Object.assign(this, props);\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { messageSW } from './messageSW.js';\nimport { WorkboxEventTarget } from './utils/WorkboxEventTarget.js';\nimport { urlsMatch } from './utils/urlsMatch.js';\nimport { WorkboxEvent } from './utils/WorkboxEvent.js';\nimport './_version.js';\n// The time a SW must be in the waiting phase before we can conclude\n// `skipWaiting()` wasn't called. This 200 amount wasn't scientifically\n// chosen, but it seems to avoid false positives in my testing.\nconst WAITING_TIMEOUT_DURATION = 200;\n// The amount of time after a registration that we can reasonably conclude\n// that the registration didn't trigger an update.\nconst REGISTRATION_TIMEOUT_DURATION = 60000;\n/**\n * A class to aid in handling service worker registration, updates, and\n * reacting to service worker lifecycle events.\n *\n * @fires [message]{@link module:workbox-window.Workbox#message}\n * @fires [installed]{@link module:workbox-window.Workbox#installed}\n * @fires [waiting]{@link module:workbox-window.Workbox#waiting}\n * @fires [controlling]{@link module:workbox-window.Workbox#controlling}\n * @fires [activated]{@link module:workbox-window.Workbox#activated}\n * @fires [redundant]{@link module:workbox-window.Workbox#redundant}\n * @fires [externalinstalled]{@link module:workbox-window.Workbox#externalinstalled}\n * @fires [externalwaiting]{@link module:workbox-window.Workbox#externalwaiting}\n * @fires [externalactivated]{@link module:workbox-window.Workbox#externalactivated}\n * @memberof module:workbox-window\n */\nclass Workbox extends WorkboxEventTarget {\n    /**\n     * Creates a new Workbox instance with a script URL and service worker\n     * options. The script URL and options are the same as those used when\n     * calling `navigator.serviceWorker.register(scriptURL, options)`. See:\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     *\n     * @param {string} scriptURL The service worker script associated with this\n     *     instance.\n     * @param {Object} [registerOptions] The service worker options associated\n     *     with this instance.\n     */\n    constructor(scriptURL, registerOptions = {}) {\n        super();\n        this._registerOptions = {};\n        this._updateFoundCount = 0;\n        // Deferreds we can resolve later.\n        this._swDeferred = new Deferred();\n        this._activeDeferred = new Deferred();\n        this._controllingDeferred = new Deferred();\n        this._registrationTime = 0;\n        this._ownSWs = new Set();\n        /**\n         * @private\n         */\n        this._onUpdateFound = () => {\n            // `this._registration` will never be `undefined` after an update is found.\n            const registration = this._registration;\n            const installingSW = registration.installing;\n            // If the script URL passed to `navigator.serviceWorker.register()` is\n            // different from the current controlling SW's script URL, we know any\n            // successful registration calls will trigger an `updatefound` event.\n            // But if the registered script URL is the same as the current controlling\n            // SW's script URL, we'll only get an `updatefound` event if the file\n            // changed since it was last registered. This can be a problem if the user\n            // opens up the same page in a different tab, and that page registers\n            // a SW that triggers an update. It's a problem because this page has no\n            // good way of knowing whether the `updatefound` event came from the SW\n            // script it registered or from a registration attempt made by a newer\n            // version of the page running in another tab.\n            // To minimize the possibility of a false positive, we use the logic here:\n            let updateLikelyTriggeredExternally = \n            // Since we enforce only calling `register()` once, and since we don't\n            // add the `updatefound` event listener until the `register()` call, if\n            // `_updateFoundCount` is > 0 then it means this method has already\n            // been called, thus this SW must be external\n            this._updateFoundCount > 0 ||\n                // If the script URL of the installing SW is different from this\n                // instance's script URL, we know it's definitely not from our\n                // registration.\n                !urlsMatch(installingSW.scriptURL, this._scriptURL) ||\n                // If all of the above are false, then we use a time-based heuristic:\n                // Any `updatefound` event that occurs long after our registration is\n                // assumed to be external.\n                (performance.now() >\n                    this._registrationTime + REGISTRATION_TIMEOUT_DURATION) ?\n                // If any of the above are not true, we assume the update was\n                // triggered by this instance.\n                true : false;\n            if (updateLikelyTriggeredExternally) {\n                this._externalSW = installingSW;\n                registration.removeEventListener('updatefound', this._onUpdateFound);\n            }\n            else {\n                // If the update was not triggered externally we know the installing\n                // SW is the one we registered, so we set it.\n                this._sw = installingSW;\n                this._ownSWs.add(installingSW);\n                this._swDeferred.resolve(installingSW);\n                // The `installing` state isn't something we have a dedicated\n                // callback for, but we do log messages for it in development.\n                if (process.env.NODE_ENV !== 'production') {\n                    if (navigator.serviceWorker.controller) {\n                        logger.log('Updated service worker found. Installing now...');\n                    }\n                    else {\n                        logger.log('Service worker is installing...');\n                    }\n                }\n            }\n            // Increment the `updatefound` count, so future invocations of this\n            // method can be sure they were triggered externally.\n            ++this._updateFoundCount;\n            // Add a `statechange` listener regardless of whether this update was\n            // triggered externally, since we have callbacks for both.\n            installingSW.addEventListener('statechange', this._onStateChange);\n        };\n        /**\n         * @private\n         * @param {Event} originalEvent\n         */\n        this._onStateChange = (originalEvent) => {\n            // `this._registration` will never be `undefined` after an update is found.\n            const registration = this._registration;\n            const sw = originalEvent.target;\n            const { state } = sw;\n            const isExternal = sw === this._externalSW;\n            const eventPrefix = isExternal ? 'external' : '';\n            const eventProps = {\n                sw,\n                originalEvent\n            };\n            if (!isExternal && this._isUpdate) {\n                eventProps.isUpdate = true;\n            }\n            this.dispatchEvent(new WorkboxEvent(eventPrefix + state, eventProps));\n            if (state === 'installed') {\n                // This timeout is used to ignore cases where the service worker calls\n                // `skipWaiting()` in the install event, thus moving it directly in the\n                // activating state. (Since all service workers *must* go through the\n                // waiting phase, the only way to detect `skipWaiting()` called in the\n                // install event is to observe that the time spent in the waiting phase\n                // is very short.)\n                // NOTE: we don't need separate timeouts for the own and external SWs\n                // since they can't go through these phases at the same time.\n                this._waitingTimeout = self.setTimeout(() => {\n                    // Ensure the SW is still waiting (it may now be redundant).\n                    if (state === 'installed' && registration.waiting === sw) {\n                        this.dispatchEvent(new WorkboxEvent(eventPrefix + 'waiting', eventProps));\n                        if (process.env.NODE_ENV !== 'production') {\n                            if (isExternal) {\n                                logger.warn('An external service worker has installed but is ' +\n                                    'waiting for this client to close before activating...');\n                            }\n                            else {\n                                logger.warn('The service worker has installed but is waiting ' +\n                                    'for existing clients to close before activating...');\n                            }\n                        }\n                    }\n                }, WAITING_TIMEOUT_DURATION);\n            }\n            else if (state === 'activating') {\n                clearTimeout(this._waitingTimeout);\n                if (!isExternal) {\n                    this._activeDeferred.resolve(sw);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                switch (state) {\n                    case 'installed':\n                        if (isExternal) {\n                            logger.warn('An external service worker has installed. ' +\n                                'You may want to suggest users reload this page.');\n                        }\n                        else {\n                            logger.log('Registered service worker installed.');\n                        }\n                        break;\n                    case 'activated':\n                        if (isExternal) {\n                            logger.warn('An external service worker has activated.');\n                        }\n                        else {\n                            logger.log('Registered service worker activated.');\n                            if (sw !== navigator.serviceWorker.controller) {\n                                logger.warn('The registered service worker is active but ' +\n                                    'not yet controlling the page. Reload or run ' +\n                                    '`clients.claim()` in the service worker.');\n                            }\n                        }\n                        break;\n                    case 'redundant':\n                        if (sw === this._compatibleControllingSW) {\n                            logger.log('Previously controlling service worker now redundant!');\n                        }\n                        else if (!isExternal) {\n                            logger.log('Registered service worker now redundant!');\n                        }\n                        break;\n                }\n            }\n        };\n        /**\n         * @private\n         * @param {Event} originalEvent\n         */\n        this._onControllerChange = (originalEvent) => {\n            const sw = this._sw;\n            if (sw === navigator.serviceWorker.controller) {\n                this.dispatchEvent(new WorkboxEvent('controlling', {\n                    sw,\n                    originalEvent,\n                    isUpdate: this._isUpdate,\n                }));\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log('Registered service worker now controlling this page.');\n                }\n                this._controllingDeferred.resolve(sw);\n            }\n        };\n        /**\n         * @private\n         * @param {Event} originalEvent\n         */\n        this._onMessage = async (originalEvent) => {\n            const { data, source } = originalEvent;\n            // Wait until there's an \"own\" service worker. This is used to buffer\n            // `message` events that may be received prior to calling `register()`.\n            await this.getSW();\n            // If the service worker that sent the message is in the list of own\n            // service workers for this instance, dispatch a `message` event.\n            // NOTE: we check for all previously owned service workers rather than\n            // just the current one because some messages (e.g. cache updates) use\n            // a timeout when sent and may be delayed long enough for a service worker\n            // update to be found.\n            if (this._ownSWs.has(source)) {\n                this.dispatchEvent(new WorkboxEvent('message', {\n                    data,\n                    sw: source,\n                    originalEvent,\n                }));\n            }\n        };\n        this._scriptURL = scriptURL;\n        this._registerOptions = registerOptions;\n        // Add a message listener immediately since messages received during\n        // page load are buffered only until the DOMContentLoaded event:\n        // https://github.com/GoogleChrome/workbox/issues/2202\n        navigator.serviceWorker.addEventListener('message', this._onMessage);\n    }\n    /**\n     * Registers a service worker for this instances script URL and service\n     * worker options. By default this method delays registration until after\n     * the window has loaded.\n     *\n     * @param {Object} [options]\n     * @param {Function} [options.immediate=false] Setting this to true will\n     *     register the service worker immediately, even if the window has\n     *     not loaded (not recommended).\n     */\n    async register({ immediate = false } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._registrationTime) {\n                logger.error('Cannot re-register a Workbox instance after it has ' +\n                    'been registered. Create a new instance instead.');\n                return;\n            }\n        }\n        if (!immediate && document.readyState !== 'complete') {\n            await new Promise((res) => window.addEventListener('load', res));\n        }\n        // Set this flag to true if any service worker was controlling the page\n        // at registration time.\n        this._isUpdate = Boolean(navigator.serviceWorker.controller);\n        // Before registering, attempt to determine if a SW is already controlling\n        // the page, and if that SW script (and version, if specified) matches this\n        // instance's script.\n        this._compatibleControllingSW = this._getControllingSWIfCompatible();\n        this._registration = await this._registerScript();\n        // If we have a compatible controller, store the controller as the \"own\"\n        // SW, resolve active/controlling deferreds and add necessary listeners.\n        if (this._compatibleControllingSW) {\n            this._sw = this._compatibleControllingSW;\n            this._activeDeferred.resolve(this._compatibleControllingSW);\n            this._controllingDeferred.resolve(this._compatibleControllingSW);\n            this._compatibleControllingSW.addEventListener('statechange', this._onStateChange, { once: true });\n        }\n        // If there's a waiting service worker with a matching URL before the\n        // `updatefound` event fires, it likely means that this site is open\n        // in another tab, or the user refreshed the page (and thus the previous\n        // page wasn't fully unloaded before this page started loading).\n        // https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#waiting\n        const waitingSW = this._registration.waiting;\n        if (waitingSW && urlsMatch(waitingSW.scriptURL, this._scriptURL)) {\n            // Store the waiting SW as the \"own\" Sw, even if it means overwriting\n            // a compatible controller.\n            this._sw = waitingSW;\n            // Run this in the next microtask, so any code that adds an event\n            // listener after awaiting `register()` will get this event.\n            dontWaitFor(Promise.resolve().then(() => {\n                this.dispatchEvent(new WorkboxEvent('waiting', {\n                    sw: waitingSW,\n                    wasWaitingBeforeRegister: true,\n                }));\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn('A service worker was already waiting to activate ' +\n                        'before this script was registered...');\n                }\n            }));\n        }\n        // If an \"own\" SW is already set, resolve the deferred.\n        if (this._sw) {\n            this._swDeferred.resolve(this._sw);\n            this._ownSWs.add(this._sw);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log('Successfully registered service worker.', this._scriptURL);\n            if (navigator.serviceWorker.controller) {\n                if (this._compatibleControllingSW) {\n                    logger.debug('A service worker with the same script URL ' +\n                        'is already controlling this page.');\n                }\n                else {\n                    logger.debug('A service worker with a different script URL is ' +\n                        'currently controlling the page. The browser is now fetching ' +\n                        'the new script now...');\n                }\n            }\n            const currentPageIsOutOfScope = () => {\n                const scopeURL = new URL(this._registerOptions.scope || this._scriptURL, document.baseURI);\n                const scopeURLBasePath = new URL('./', scopeURL.href).pathname;\n                return !location.pathname.startsWith(scopeURLBasePath);\n            };\n            if (currentPageIsOutOfScope()) {\n                logger.warn('The current page is not in scope for the registered ' +\n                    'service worker. Was this a mistake?');\n            }\n        }\n        this._registration.addEventListener('updatefound', this._onUpdateFound);\n        navigator.serviceWorker.addEventListener('controllerchange', this._onControllerChange, { once: true });\n        return this._registration;\n    }\n    /**\n     * Checks for updates of the registered service worker.\n     */\n    async update() {\n        if (!this._registration) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error('Cannot update a Workbox instance without ' +\n                    'being registered. Register the Workbox instance first.');\n            }\n            return;\n        }\n        // Try to update registration\n        await this._registration.update();\n    }\n    /**\n     * Resolves to the service worker registered by this instance as soon as it\n     * is active. If a service worker was already controlling at registration\n     * time then it will resolve to that if the script URLs (and optionally\n     * script versions) match, otherwise it will wait until an update is found\n     * and activates.\n     *\n     * @return {Promise<ServiceWorker>}\n     */\n    get active() {\n        return this._activeDeferred.promise;\n    }\n    /**\n     * Resolves to the service worker registered by this instance as soon as it\n     * is controlling the page. If a service worker was already controlling at\n     * registration time then it will resolve to that if the script URLs (and\n     * optionally script versions) match, otherwise it will wait until an update\n     * is found and starts controlling the page.\n     * Note: the first time a service worker is installed it will active but\n     * not start controlling the page unless `clients.claim()` is called in the\n     * service worker.\n     *\n     * @return {Promise<ServiceWorker>}\n     */\n    get controlling() {\n        return this._controllingDeferred.promise;\n    }\n    /**\n     * Resolves with a reference to a service worker that matches the script URL\n     * of this instance, as soon as it's available.\n     *\n     * If, at registration time, there's already an active or waiting service\n     * worker with a matching script URL, it will be used (with the waiting\n     * service worker taking precedence over the active service worker if both\n     * match, since the waiting service worker would have been registered more\n     * recently).\n     * If there's no matching active or waiting service worker at registration\n     * time then the promise will not resolve until an update is found and starts\n     * installing, at which point the installing service worker is used.\n     *\n     * @return {Promise<ServiceWorker>}\n     */\n    async getSW() {\n        // If `this._sw` is set, resolve with that as we want `getSW()` to\n        // return the correct (new) service worker if an update is found.\n        return this._sw !== undefined ? this._sw : this._swDeferred.promise;\n    }\n    /**\n     * Sends the passed data object to the service worker registered by this\n     * instance (via [`getSW()`]{@link module:workbox-window.Workbox#getSW}) and resolves\n     * with a response (if any).\n     *\n     * A response can be set in a message handler in the service worker by\n     * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n     * returned by `messageSW()`. If no response is set, the promise will never\n     * resolve.\n     *\n     * @param {Object} data An object to send to the service worker\n     * @return {Promise<Object>}\n     */\n    async messageSW(data) {\n        const sw = await this.getSW();\n        return messageSW(sw, data);\n    }\n    /**\n     * Checks for a service worker already controlling the page and returns\n     * it if its script URL matches.\n     *\n     * @private\n     * @return {ServiceWorker|undefined}\n     */\n    _getControllingSWIfCompatible() {\n        const controller = navigator.serviceWorker.controller;\n        if (controller && urlsMatch(controller.scriptURL, this._scriptURL)) {\n            return controller;\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Registers a service worker for this instances script URL and register\n     * options and tracks the time registration was complete.\n     *\n     * @private\n     */\n    async _registerScript() {\n        try {\n            const reg = await navigator.serviceWorker.register(this._scriptURL, this._registerOptions);\n            // Keep track of when registration happened, so it can be used in the\n            // `this._onUpdateFound` heuristic. Also use the presence of this\n            // property as a way to see if `.register()` has been called.\n            this._registrationTime = performance.now();\n            return reg;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(error);\n            }\n            // Re-throw the error.\n            throw error;\n        }\n    }\n}\nexport { Workbox };\n// The jsdoc comments below outline the events this instance may dispatch:\n// -----------------------------------------------------------------------\n/**\n * The `message` event is dispatched any time a `postMessage` is received.\n *\n * @event module:workbox-window.Workbox#message\n * @type {WorkboxEvent}\n * @property {*} data The `data` property from the original `message` event.\n * @property {Event} originalEvent The original [`message`]{@link https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent}\n *     event.\n * @property {string} type `message`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `installed` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `installed`.\n *\n * Then can happen either the very first time a service worker is installed,\n * or after an update to the current service worker is found. In the case\n * of an update being found, the event's `isUpdate` property will be `true`.\n *\n * @event module:workbox-window.Workbox#installed\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `installed`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `waiting` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `installed` and then doesn't immediately change to `activating`.\n * It may also be dispatched if a service worker with the same\n * [`scriptURL`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL}\n * was already waiting when the [`register()`]{@link module:workbox-window.Workbox#register}\n * method was called.\n *\n * @event module:workbox-window.Workbox#waiting\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event|undefined} originalEvent The original\n *    [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event, or `undefined` in the case where the service worker was waiting\n *     to before `.register()` was called.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {boolean|undefined} wasWaitingBeforeRegister True if a service worker with\n *     a matching `scriptURL` was already waiting when this `Workbox`\n *     instance called `register()`.\n * @property {string} type `waiting`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `controlling` event is dispatched if a\n * [`controllerchange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange}\n * fires on the service worker [container]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer}\n * and the [`scriptURL`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL}\n * of the new [controller]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller}\n * matches the `scriptURL` of the `Workbox` instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}.\n *\n * @event module:workbox-window.Workbox#controlling\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`controllerchange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this service worker was registered.\n * @property {string} type `controlling`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `activated` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `activated`.\n *\n * @event module:workbox-window.Workbox#activated\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `activated`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `redundant` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `redundant`.\n *\n * @event module:workbox-window.Workbox#redundant\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `redundant`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `externalinstalled` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-window#when_an_unexpected_version_of_the_service_worker_is_found}\n * changes to `installed`.\n *\n * @event module:workbox-window.Workbox#externalinstalled\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalinstalled`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `externalwaiting` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-window#when_an_unexpected_version_of_the_service_worker_is_found}\n * changes to `waiting`.\n *\n * @event module:workbox-window.Workbox#externalwaiting\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalwaiting`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `externalactivated` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-window#when_an_unexpected_version_of_the_service_worker_is_found}\n * changes to `activated`.\n *\n * @event module:workbox-window.Workbox#externalactivated\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalactivated`.\n * @property {Workbox} target The `Workbox` instance.\n */\n"],"names":["self","_","e","messageSW","sw","data","Promise","resolve","messageChannel","MessageChannel","port1","onmessage","event","postMessage","port2","Deferred","constructor","promise","reject","dontWaitFor","then","logger","process","__WB_DISABLE_DEV_LOGS","inGroup","methodToColorMap","debug","log","warn","error","groupCollapsed","groupEnd","print","method","args","test","navigator","userAgent","console","styles","logPrefix","join","api","loggerMethods","Object","keys","key","WorkboxEventTarget","_eventListenerRegistry","Map","addEventListener","type","listener","foo","_getEventListenersByType","add","removeEventListener","delete","dispatchEvent","target","listeners","has","set","Set","get","urlsMatch","url1","url2","href","location","URL","WorkboxEvent","props","assign","WAITING_TIMEOUT_DURATION","REGISTRATION_TIMEOUT_DURATION","Workbox","scriptURL","registerOptions","_registerOptions","_updateFoundCount","_swDeferred","_activeDeferred","_controllingDeferred","_registrationTime","_ownSWs","_onUpdateFound","registration","_registration","installingSW","installing","updateLikelyTriggeredExternally","_scriptURL","performance","now","_externalSW","_sw","serviceWorker","controller","_onStateChange","originalEvent","state","isExternal","eventPrefix","eventProps","_isUpdate","isUpdate","_waitingTimeout","setTimeout","waiting","clearTimeout","_compatibleControllingSW","_onControllerChange","_onMessage","source","getSW","register","immediate","document","readyState","res","window","Boolean","_getControllingSWIfCompatible","_registerScript","once","waitingSW","wasWaitingBeforeRegister","currentPageIsOutOfScope","scopeURL","scope","baseURI","scopeURLBasePath","pathname","startsWith","update","active","controlling","undefined","reg"],"mappings":"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"}