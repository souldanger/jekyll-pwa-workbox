{"version":3,"file":"workbox-broadcast-update.dev.js","sources":["../_version.js","../responsesAreSame.js","../utils/constants.js","../broadcastUpdate.js","../BroadcastCacheUpdate.js","../Plugin.js"],"sourcesContent":["// @ts-ignore\ntry {\n    self['workbox:broadcast-update:5.0.0-alpha.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * Given two `Response's`, compares several header values to see if they are\n * the same or not.\n *\n * @param {Response} firstResponse\n * @param {Response} secondResponse\n * @param {Array<string>} headersToCheck\n * @return {boolean}\n *\n * @memberof workbox.broadcastUpdate\n * @private\n */\nconst responsesAreSame = (firstResponse, secondResponse, headersToCheck) => {\n    if (process.env.NODE_ENV !== 'production') {\n        if (!(firstResponse instanceof Response &&\n            secondResponse instanceof Response)) {\n            throw new WorkboxError('invalid-responses-are-same-args');\n        }\n    }\n    const atLeastOneHeaderAvailable = headersToCheck.some((header) => {\n        return firstResponse.headers.has(header) &&\n            secondResponse.headers.has(header);\n    });\n    if (!atLeastOneHeaderAvailable) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to determine where the response has been updated ` +\n                `because none of the headers that would be checked are present.`);\n            logger.debug(`Attempting to compare the following: `, firstResponse, secondResponse, headersToCheck);\n        }\n        // Just return true, indicating the that responses are the same, since we\n        // can't determine otherwise.\n        return true;\n    }\n    return headersToCheck.every((header) => {\n        const headerStateComparison = firstResponse.headers.has(header) ===\n            secondResponse.headers.has(header);\n        const headerValueComparison = firstResponse.headers.get(header) ===\n            secondResponse.headers.get(header);\n        return headerStateComparison && headerValueComparison;\n    });\n};\nexport { responsesAreSame };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const CACHE_UPDATED_MESSAGE_TYPE = 'CACHE_UPDATED';\nexport const CACHE_UPDATED_MESSAGE_META = 'workbox-broadcast-update';\nexport const DEFAULT_BROADCAST_CHANNEL_NAME = 'workbox';\nexport const DEFAULT_DEFER_NOTIFICATION_TIMEOUT = 10000;\nexport const DEFAULT_HEADERS_TO_CHECK = [\n    'content-length',\n    'etag',\n    'last-modified',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { CACHE_UPDATED_MESSAGE_TYPE, CACHE_UPDATED_MESSAGE_META } from './utils/constants.js';\nimport './_version.js';\n/**\n * You would not normally call this method directly; it's called automatically\n * by an instance of the {@link BroadcastCacheUpdate} class. It's exposed here\n * for the benefit of developers who would rather not use the full\n * `BroadcastCacheUpdate` implementation.\n *\n * Calling this will dispatch a message on the provided\n * {@link https://developers.google.com/web/updates/2016/09/broadcastchannel|Broadcast Channel}\n * to notify interested subscribers about a change to a cached resource.\n *\n * The message that's posted has a formation inspired by the\n * [Flux standard action](https://github.com/acdlite/flux-standard-action#introduction)\n * format like so:\n *\n * ```\n * {\n *   type: 'CACHE_UPDATED',\n *   meta: 'workbox-broadcast-update',\n *   payload: {\n *     cacheName: 'the-cache-name',\n *     updatedURL: 'https://example.com/'\n *   }\n * }\n * ```\n *\n * (Usage of [Flux](https://facebook.github.io/flux/) itself is not at\n * all required.)\n *\n * @param {Object} options\n * @param {string} options.cacheName The name of the cache in which the updated\n *     `Response` was stored.\n * @param {string} options.url The URL associated with the updated `Response`.\n * @param {BroadcastChannel} [options.channel] The `BroadcastChannel` to use.\n *     If no channel is set or the browser doesn't support the BroadcastChannel\n *     api, then an attempt will be made to `postMessage` each window client.\n *\n * @memberof workbox.broadcastUpdate\n */\nconst broadcastUpdate = async ({ channel, cacheName, url }) => {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(cacheName, 'string', {\n            moduleName: 'workbox-broadcast-update',\n            className: '~',\n            funcName: 'broadcastUpdate',\n            paramName: 'cacheName',\n        });\n        assert.isType(url, 'string', {\n            moduleName: 'workbox-broadcast-update',\n            className: '~',\n            funcName: 'broadcastUpdate',\n            paramName: 'url',\n        });\n    }\n    const data = {\n        type: CACHE_UPDATED_MESSAGE_TYPE,\n        meta: CACHE_UPDATED_MESSAGE_META,\n        payload: {\n            cacheName: cacheName,\n            updatedURL: url,\n        },\n    };\n    if (channel) {\n        channel.postMessage(data);\n    }\n    else {\n        const windows = await self.clients.matchAll({ type: 'window' });\n        for (const win of windows) {\n            win.postMessage(data);\n        }\n    }\n};\nexport { broadcastUpdate };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { responsesAreSame } from './responsesAreSame.js';\nimport { broadcastUpdate } from './broadcastUpdate.js';\nimport { DEFAULT_HEADERS_TO_CHECK, DEFAULT_BROADCAST_CHANNEL_NAME, DEFAULT_DEFER_NOTIFICATION_TIMEOUT } from './utils/constants.js';\nimport './_version.js';\n/**\n * Uses the [Broadcast Channel API]{@link https://developers.google.com/web/updates/2016/09/broadcastchannel}\n * to notify interested parties when a cached response has been updated.\n * In browsers that do not support the Broadcast Channel API, the instance\n * falls back to sending the update via `postMessage()` to all window clients.\n *\n * For efficiency's sake, the underlying response bodies are not compared;\n * only specific response headers are checked.\n *\n * @memberof workbox.broadcastUpdate\n */\nclass BroadcastCacheUpdate {\n    /**\n     * Construct a BroadcastCacheUpdate instance with a specific `channelName` to\n     * broadcast messages on\n     *\n     * @param {Object} options\n     * @param {Array<string>}\n     *     [options.headersToCheck=['content-length', 'etag', 'last-modified']]\n     *     A list of headers that will be used to determine whether the responses\n     *     differ.\n     * @param {string} [options.channelName='workbox'] The name that will be used\n     *.    when creating the `BroadcastChannel`, which defaults to 'workbox' (the\n     *     channel name used by the `workbox-window` package).\n     * @param {string} [options.deferNoticationTimeout=10000] The amount of time\n     *     to wait for a ready message from the window on navigation requests\n     *     before sending the update.\n     */\n    constructor({ headersToCheck, channelName, deferNoticationTimeout, } = {}) {\n        this._headersToCheck = headersToCheck || DEFAULT_HEADERS_TO_CHECK;\n        this._channelName = channelName || DEFAULT_BROADCAST_CHANNEL_NAME;\n        this._deferNoticationTimeout =\n            deferNoticationTimeout || DEFAULT_DEFER_NOTIFICATION_TIMEOUT;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(this._channelName, 'string', {\n                moduleName: 'workbox-broadcast-update',\n                className: 'BroadcastCacheUpdate',\n                funcName: 'constructor',\n                paramName: 'channelName',\n            });\n            assert.isArray(this._headersToCheck, {\n                moduleName: 'workbox-broadcast-update',\n                className: 'BroadcastCacheUpdate',\n                funcName: 'constructor',\n                paramName: 'headersToCheck',\n            });\n        }\n        this._initWindowReadyDeferreds();\n    }\n    /**\n     * Compare two [Responses](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n     * and send a message via the\n     * {@link https://developers.google.com/web/updates/2016/09/broadcastchannel|Broadcast Channel API}\n     * if they differ.\n     *\n     * Neither of the Responses can be {@link http://stackoverflow.com/questions/39109789|opaque}.\n     *\n     * @param {Object} options\n     * @param {Response} options.oldResponse Cached response to compare.\n     * @param {Response} options.newResponse Possibly updated response to compare.\n     * @param {string} options.url The URL of the request.\n     * @param {string} options.cacheName Name of the cache the responses belong\n     *     to. This is included in the broadcast message.\n     * @param {Event} [options.event] event An optional event that triggered\n     *     this possible cache update.\n     * @return {Promise} Resolves once the update is sent.\n     */\n    notifyIfUpdated({ oldResponse, newResponse, url, cacheName, event }) {\n        if (!responsesAreSame(oldResponse, newResponse, this._headersToCheck)) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Newer response found (and cached) for:`, url);\n            }\n            const sendUpdate = async () => {\n                // In the case of a navigation request, the requesting page will likely\n                // not have loaded its JavaScript in time to recevied the update\n                // notification, so we defer it until ready (or we timeout waiting).\n                if (event && event.request && event.request.mode === 'navigate') {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.debug(`Original request was a navigation request, ` +\n                            `waiting for a ready message from the window`, event.request);\n                    }\n                    await this._windowReadyOrTimeout(event);\n                }\n                await this._broadcastUpdate({\n                    channel: this._getChannel(),\n                    cacheName,\n                    url,\n                });\n            };\n            // Send the update and ensure the SW stays alive until it's sent.\n            const done = sendUpdate();\n            if (event) {\n                try {\n                    event.waitUntil(done);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        logger.warn(`Unable to ensure service worker stays alive ` +\n                            `when broadcasting cache update for ` +\n                            `${getFriendlyURL(event.request.url)}'.`);\n                    }\n                }\n            }\n            return done;\n        }\n    }\n    /**\n     * NOTE: this is exposed on the instance primarily so it can be spied on\n     * in tests.\n     *\n     * @param {Object} opts\n     * @private\n     */\n    async _broadcastUpdate(opts) {\n        await broadcastUpdate(opts);\n    }\n    /**\n     * @return {BroadcastChannel|undefined} The BroadcastChannel instance used for\n     * broadcasting updates, or undefined if the browser doesn't support the\n     * Broadcast Channel API.\n     *\n     * @private\n     */\n    _getChannel() {\n        if (('BroadcastChannel' in self) && !this._channel) {\n            this._channel = new BroadcastChannel(this._channelName);\n        }\n        return this._channel;\n    }\n    /**\n     * Waits for a message from the window indicating that it's capable of\n     * receiving broadcasts. By default, this will only wait for the amount of\n     * time specified via the `deferNoticationTimeout` option.\n     *\n     * @param {Event} event The navigation fetch event.\n     * @return {Promise}\n     * @private\n     */\n    _windowReadyOrTimeout(event) {\n        if (!this._navigationEventsDeferreds.has(event)) {\n            const deferred = new Deferred();\n            // Set the deferred on the `_navigationEventsDeferreds` map so it will\n            // be resolved when the next ready message event comes.\n            this._navigationEventsDeferreds.set(event, deferred);\n            // But don't wait too long for the message since it may never come.\n            const timeout = setTimeout(() => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Timed out after ${this._deferNoticationTimeout}` +\n                        `ms waiting for message from window`);\n                }\n                deferred.resolve();\n            }, this._deferNoticationTimeout);\n            // Ensure the timeout is cleared if the deferred promise is resolved.\n            deferred.promise.then(() => clearTimeout(timeout));\n        }\n        return this._navigationEventsDeferreds.get(event).promise;\n    }\n    /**\n     * Creates a mapping between navigation fetch events and deferreds, and adds\n     * a listener for message events from the window. When message events arrive,\n     * all deferreds in the mapping are resolved.\n     *\n     * Note: it would be easier if we could only resolve the deferred of\n     * navigation fetch event whose client ID matched the source ID of the\n     * message event, but currently client IDs are not exposed on navigation\n     * fetch events: https://www.chromestatus.com/feature/4846038800138240\n     *\n     * @private\n     */\n    _initWindowReadyDeferreds() {\n        // A mapping between navigation events and their deferreds.\n        this._navigationEventsDeferreds = new Map();\n        // The message listener needs to be added in the initial run of the\n        // service worker, but since we don't actually need to be listening for\n        // messages until the cache updates, we only invoke the callback if set.\n        self.addEventListener('message', (event) => {\n            if (event.data.type === 'WINDOW_READY' &&\n                event.data.meta === 'workbox-window' &&\n                this._navigationEventsDeferreds.size > 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Received WINDOW_READY event: `, event);\n                }\n                // Resolve any pending deferreds.\n                for (const deferred of this._navigationEventsDeferreds.values()) {\n                    deferred.resolve();\n                }\n                this._navigationEventsDeferreds.clear();\n            }\n        });\n    }\n}\nexport { BroadcastCacheUpdate };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { BroadcastCacheUpdate } from './BroadcastCacheUpdate.js';\nimport './_version.js';\n/**\n * This plugin will automatically broadcast a message whenever a cached response\n * is updated.\n *\n * @memberof workbox.broadcastUpdate\n */\nclass Plugin {\n    /**\n     * Construct a BroadcastCacheUpdate instance with the passed options and\n     * calls its `notifyIfUpdated()` method whenever the plugin's\n     * `cacheDidUpdate` callback is invoked.\n     *\n     * @param {Object} options\n     * @param {Array<string>}\n     *     [options.headersToCheck=['content-length', 'etag', 'last-modified']]\n     *     A list of headers that will be used to determine whether the responses\n     *     differ.\n     * @param {string} [options.channelName='workbox'] The name that will be used\n     *.    when creating the `BroadcastChannel`, which defaults to 'workbox' (the\n     *     channel name used by the `workbox-window` package).\n     * @param {string} [options.deferNoticationTimeout=10000] The amount of time\n     *     to wait for a ready message from the window on navigation requests\n     *     before sending the update.\n     */\n    constructor(options) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-sw` and `workbox-runtime-caching` handlers when an entry is\n         * added to a cache.\n         *\n         * @private\n         * @param {Object} options The input object to this function.\n         * @param {string} options.cacheName Name of the cache being updated.\n         * @param {Response} [options.oldResponse] The previous cached value, if any.\n         * @param {Response} options.newResponse The new value in the cache.\n         * @param {Request} options.request The request that triggered the udpate.\n         * @param {Request} [options.event] The event that triggered the update.\n         */\n        this.cacheDidUpdate = async ({ cacheName, oldResponse, newResponse, request, event }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-broadcast-update',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(newResponse, Response, {\n                    moduleName: 'workbox-broadcast-update',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'newResponse',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-broadcast-update',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            // Without a two responses there is nothing to compare.\n            if (oldResponse) {\n                this._broadcastUpdate.notifyIfUpdated({\n                    cacheName,\n                    oldResponse,\n                    newResponse,\n                    event,\n                    url: request.url,\n                });\n            }\n        };\n        this._broadcastUpdate = new BroadcastCacheUpdate(options);\n    }\n}\nexport { Plugin };\n"],"names":["self","_","e","responsesAreSame","firstResponse","secondResponse","headersToCheck","Response","WorkboxError","atLeastOneHeaderAvailable","some","header","headers","has","logger","warn","debug","every","headerStateComparison","headerValueComparison","get","CACHE_UPDATED_MESSAGE_TYPE","CACHE_UPDATED_MESSAGE_META","DEFAULT_BROADCAST_CHANNEL_NAME","DEFAULT_DEFER_NOTIFICATION_TIMEOUT","DEFAULT_HEADERS_TO_CHECK","broadcastUpdate","channel","cacheName","url","assert","isType","moduleName","className","funcName","paramName","data","type","meta","payload","updatedURL","postMessage","windows","clients","matchAll","win","BroadcastCacheUpdate","constructor","channelName","deferNoticationTimeout","_headersToCheck","_channelName","_deferNoticationTimeout","isArray","_initWindowReadyDeferreds","notifyIfUpdated","oldResponse","newResponse","event","log","sendUpdate","request","mode","_windowReadyOrTimeout","_broadcastUpdate","_getChannel","done","waitUntil","error","getFriendlyURL","opts","_channel","BroadcastChannel","_navigationEventsDeferreds","deferred","Deferred","set","timeout","setTimeout","resolve","promise","then","clearTimeout","Map","addEventListener","size","values","clear","Plugin","options","cacheDidUpdate","isInstance","Request"],"mappings":"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"}