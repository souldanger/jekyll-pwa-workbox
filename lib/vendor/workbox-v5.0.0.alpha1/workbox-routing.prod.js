this.workbox=this.workbox||{},this.workbox.routing=function(t,e,r){"use strict";try{self["workbox:routing:5.0.0-alpha.0"]&&_()}catch(t){}const s="GET",n=t=>t&&"object"==typeof t?t:{handle:t};class i{constructor(t,e,r=s){this.handler=n(e),this.match=t,this.method=r}}class o extends i{constructor(t,{whitelist:e=[/./],blacklist:r=[]}={}){super(t=>this.t(t),t),this.s=e,this.i=r}t({url:t,request:e}){if(e&&"navigate"!==e.mode)return!1;const r=t.pathname+t.search;for(const t of this.i)if(t.test(r))return!1;return!!this.s.some(t=>t.test(r))}}class u extends i{constructor(t,e,r){super(({url:e})=>{const r=t.exec(e.href);if(r&&(e.origin===location.origin||0===r.index))return r.slice(1)},e,r)}}class c{constructor(){this.o=new Map}get routes(){return this.o}addFetchListener(){self.addEventListener("fetch",t=>{const{request:e}=t,r=this.handleRequest({request:e,event:t});r&&t.respondWith(r)})}addCacheListener(){self.addEventListener("message",async t=>{if(t.data&&"CACHE_URLS"===t.data.type){const{payload:e}=t.data,r=Promise.all(e.urlsToCache.map(t=>{"string"==typeof t&&(t=[t]);const e=new Request(...t);return this.handleRequest({request:e})}));t.waitUntil(r),t.ports&&t.ports[0]&&(await r,t.ports[0].postMessage(!0))}})}handleRequest({request:t,event:e}){const r=new URL(t.url,location.href);if(!r.protocol.startsWith("http"))return;let s,{params:n,route:i}=this.findMatchingRoute({url:r,request:t,event:e}),o=i&&i.handler;if(!o&&this.u&&(o=this.u),o){try{s=o.handle({url:r,request:t,event:e,params:n})}catch(t){s=Promise.reject(t)}return s&&this.h&&(s=s.catch(s=>this.h.handle({url:r,request:t,event:e}))),s}}findMatchingRoute({url:t,request:e,event:r}){const s=this.o.get(e.method)||[];for(const n of s){let s,i=n.match({url:t,request:e,event:r});if(i)return Array.isArray(i)&&i.length>0?s=i:i.constructor===Object&&Object.keys(i).length>0&&(s=i),{route:n,params:s}}return{}}setDefaultHandler(t){this.u=n(t)}setCatchHandler(t){this.h=n(t)}registerRoute(t){this.o.has(t.method)||this.o.set(t.method,[]),this.o.get(t.method).push(t)}unregisterRoute(t){if(!this.o.has(t.method))throw new r.WorkboxError("unregister-route-but-not-found-with-method",{method:t.method});const e=this.o.get(t.method).indexOf(t);if(!(e>-1))throw new r.WorkboxError("unregister-route-route-not-registered");this.o.get(t.method).splice(e,1)}}let a;const h=()=>(a||((a=new c).addFetchListener(),a.addCacheListener()),a);return t.NavigationRoute=o,t.RegExpRoute=u,t.Route=i,t.Router=c,t.registerNavigationRoute=((t,r={})=>{const s=e.cacheNames.getPrecacheName(r.cacheName),n=new o(async()=>{try{const e=await caches.match(t,{cacheName:s});if(e)return e;throw new Error(`The cache ${s} did not have an entry for `+`${t}.`)}catch(e){return fetch(t)}},{whitelist:r.whitelist,blacklist:r.blacklist});return h().registerRoute(n),n}),t.registerRoute=((t,e,s)=>{let n;if("string"==typeof t){const r=new URL(t,location.href);n=new i(({url:t})=>t.href===r.href,e,s)}else if(t instanceof RegExp)n=new u(t,e,s);else if("function"==typeof t)n=new i(t,e,s);else{if(!(t instanceof i))throw new r.WorkboxError("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});n=t}return h().registerRoute(n),n}),t.setCatchHandler=(t=>{h().setCatchHandler(t)}),t.setDefaultHandler=(t=>{h().setDefaultHandler(t)}),t}({},workbox.core._private,workbox.core._private);
//# sourceMappingURL=workbox-routing.prod.js.map
